pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd=F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
Matrix_robust <- diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6,x7)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% M %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
pacman::p_load(tidyverse, haven, dplyr, janitor , stringr)
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab6") ) # set directorio
# Put relative path
file_path = "../data/enapres_2020_ch_100/736-Modulo1618/CAP_100_URBANO_RURAL_3.sav"
enapres2020_1 <- haven::read_sav(file_path , encoding = "UTF-8" )  # read dataset
View(enapres2020_1)
names(enapres2020_1) # nombre de las variables en una lista
enapres2020_1$ESTRATO %>% attr('labels') # value labels
enapres2020_1$ESTRATO %>% attr('label') # var label
attach(enapres2020_1)
enapres2020_1 %>% group_by(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR) %>%
mutate(duplicates = n()) %>% filter(duplicates >1) %>%
select(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR, duplicates )
enapres2020_1_ndup <- enapres2020_1 %>% distinct(CCDD ,CCPP
, CCDI ,CONGLOMERADO , NSELV,
VIVIENDA, HOGAR, .keep_all = TRUE)
View(enapres2020_1_ndup)
data_filtrada <- enapres2020_1 %>% group_by(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR) %>%
mutate(duplicates = n()) %>% filter(duplicates >1) %>%
select(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR, duplicates )
View(data_filtrada)
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN = "Completa", AREA = "URBANO")
pacman::p_load(tidyverse, haven, dplyr, janitor , stringr)
# haven: leer archivos spss (sav)
# string : trabajar con string
#janitor to detect duplicates
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab6") ) # set directorio
# Put relative path
file_path = "../data/enapres_2020_ch_100/736-Modulo1618/CAP_100_URBANO_RURAL_3.sav"
enapres2020_1 <- haven::read_sav(file_path , encoding = "UTF-8" )  # read dataset
head(enapres2020_1)
names(enapres2020_1) # nombre de las variables en una lista
# Observar labels
# %>% Ctrl + shift + m
enapres2020_1$ESTRATO %>% attr('labels') # value labels
enapres2020_1$ESTRATO %>% attr('label') # var label
# 2. Check duplicates report
" %>%  Ctrol + shift + m, uso de dplyr library"
attach(enapres2020_1)
# Filter hogares urbanos que responden toda la encuesta
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN = "Completa", AREA = "URBANO")
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == "Completa", AREA == "URBANO")
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == "Completa" & AREA == "URBANO")
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == "Completa" && AREA == "URBANO")
print(AREA)
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == "Completa" & AREA == 1)
print(RESFIN)
enapres2020_1$AREA%>% attr('labels') # value labels
enapres2020_1$RESFIN %>% attr('labels') # value labels
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == 1 & AREA == 1)
data_filtrada <- enapres2020_1 %>% group_by(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR) %>%
mutate(duplicates = n()) %>% filter(duplicates >1) %>%
select(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR, duplicates )
################  laboratorio 6 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
pacman::p_load(tidyverse, haven, dplyr, janitor , stringr)
# haven: leer archivos spss (sav)
# string : trabajar con string
#janitor to detect duplicates
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab6") ) # set directorio
# Put relative path
file_path = "../data/enapres_2020_ch_100/736-Modulo1618/CAP_100_URBANO_RURAL_3.sav"
enapres2020_1 <- haven::read_sav(file_path , encoding = "UTF-8" )  # read dataset
head(enapres2020_1)
names(enapres2020_1) # nombre de las variables en una lista
# Observar labels
# %>% Ctrl + shift + m
enapres2020_1$ESTRATO %>% attr('labels') # value labels
enapres2020_1$ESTRATO %>% attr('label') # var label
print(AREA)
enapres2020_1$AREA%>% attr('labels') # value labels
print(RESFIN)
enapres2020_1$RESFIN %>% attr('labels') # value labels
# 2. Check duplicates report
" %>%  Ctrol + shift + m, uso de dplyr library"
attach(enapres2020_1)
# Filter hogares urbanos que responden toda la encuesta
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == 1 & AREA == 1)
data_filtrada <- enapres2020_1 %>% group_by(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR) %>%
mutate(duplicates = n()) %>% filter(duplicates >1) %>%
select(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR, duplicates )
View(data_filtrada)
################  laboratorio 6 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
pacman::p_load(tidyverse, haven, dplyr, janitor , stringr)
# haven: leer archivos spss (sav)
# string : trabajar con string
#janitor to detect duplicates
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab6") ) # set directorio
# Put relative path
file_path = "../data/enapres_2020_ch_100/736-Modulo1618/CAP_100_URBANO_RURAL_3.sav"
enapres2020_1 <- haven::read_sav(file_path , encoding = "UTF-8" )  # read dataset
head(enapres2020_1)
names(enapres2020_1) # nombre de las variables en una lista
# Observar labels
# %>% Ctrl + shift + m
enapres2020_1$ESTRATO %>% attr('labels') # value labels
enapres2020_1$ESTRATO %>% attr('label') # var label
print(AREA)
enapres2020_1$AREA%>% attr('labels') # value labels
print(RESFIN)
enapres2020_1$RESFIN %>% attr('labels') # value labels
# 2. Check duplicates report
" %>%  Ctrol + shift + m, uso de dplyr library"
attach(enapres2020_1)
# Filter hogares urbanos que responden toda la encuesta
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == 1 & AREA == 1)
data_filtrada <- enapres2020_1 %>% group_by(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR) %>%
mutate(duplicates = n()) %>% filter(duplicates >1) %>%
select(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR, duplicates )
View(data_filtrada)
enapres2020_1_ndup <- enapres2020_1 %>% distinct(CCDD ,CCPP
, CCDI ,CONGLOMERADO , NSELV,
VIVIENDA, HOGAR, .keep_all = TRUE)
dim(enapres2020_1_ndup)
enapres2020_1_ndup <- enapres2020_1 %>% distinct(CCDD ,CCPP
, CCDI ,CONGLOMERADO , NSELV,
VIVIENDA, HOGAR, .keep_all = F)
dim(enapres2020_1_ndup)
################  laboratorio 6 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
pacman::p_load(tidyverse, haven, dplyr, janitor , stringr)
# haven: leer archivos spss (sav)
# string : trabajar con string
#janitor to detect duplicates
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab6") ) # set directorio
# Put relative path
file_path = "../data/enapres_2020_ch_100/736-Modulo1618/CAP_100_URBANO_RURAL_3.sav"
enapres2020_1 <- haven::read_sav(file_path , encoding = "UTF-8" )  # read dataset
head(enapres2020_1)
names(enapres2020_1) # nombre de las variables en una lista
# Observar labels
# %>% Ctrl + shift + m
enapres2020_1$ESTRATO %>% attr('labels') # value labels
enapres2020_1$ESTRATO %>% attr('label') # var label
print(AREA)
enapres2020_1$AREA%>% attr('labels') # value labels
print(RESFIN)
enapres2020_1$RESFIN %>% attr('labels') # value labels
# 2. Check duplicates report
" %>%  Ctrol + shift + m, uso de dplyr library"
attach(enapres2020_1)
# Filter hogares urbanos que responden toda la encuesta
enapres2020_1 <- enapres2020_1 %>% filter(RESFIN == 1 & AREA == 1)
data_filtrada <- enapres2020_1 %>% group_by(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR) %>%
mutate(duplicates = n()) %>% filter(duplicates >1) %>%
select(CCDD ,CCPP , CCDI ,CONGLOMERADO , NSELV, VIVIENDA, HOGAR, duplicates )
View(data_filtrada)
enapres2020_1_ndup <- enapres2020_1 %>% distinct(CCDD ,CCPP
, CCDI ,CONGLOMERADO , NSELV,
VIVIENDA, HOGAR, .keep_all = F)
dim(enapres2020_1_ndup)
enapres2020_1_ndup <- enapres2020_1 %>% distinct(CCDD ,CCPP
, CCDI ,CONGLOMERADO , NSELV,
VIVIENDA, HOGAR, .keep_all = TRUE)
dim(enapres2020_1_ndup)
