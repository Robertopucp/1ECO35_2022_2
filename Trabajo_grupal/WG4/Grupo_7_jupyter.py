{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7c45962c",
   "metadata": {},
   "source": [
    "# ISSUE 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "0b84b167",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "from scipy.stats import t # t - student \n",
    "import os "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "4c56cf77",
   "metadata": {},
   "outputs": [],
   "source": [
    "user = os.getlogin()   # Username\n",
    "os.chdir(f\"/Users/{user}/Documents\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "fef4f8b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "cps2012 = pd.read_excel(\"cps2012.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "b40f0a13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>lnw</th>\n",
       "      <th>intercept</th>\n",
       "      <th>female</th>\n",
       "      <th>widowed</th>\n",
       "      <th>divorced</th>\n",
       "      <th>separated</th>\n",
       "      <th>nevermarried</th>\n",
       "      <th>hsd08</th>\n",
       "      <th>hsd911</th>\n",
       "      <th>...</th>\n",
       "      <th>so</th>\n",
       "      <th>we</th>\n",
       "      <th>exp1</th>\n",
       "      <th>exp2</th>\n",
       "      <th>exp3</th>\n",
       "      <th>exp4</th>\n",
       "      <th>weight</th>\n",
       "      <th>married</th>\n",
       "      <th>ne</th>\n",
       "      <th>sc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012</td>\n",
       "      <td>1.909542</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>4.8400</td>\n",
       "      <td>10.648000</td>\n",
       "      <td>23.425600</td>\n",
       "      <td>569.43</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012</td>\n",
       "      <td>1.365773</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>625.96</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012</td>\n",
       "      <td>2.540223</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3.6100</td>\n",
       "      <td>6.859000</td>\n",
       "      <td>13.032100</td>\n",
       "      <td>264.22</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012</td>\n",
       "      <td>1.801091</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.9600</td>\n",
       "      <td>2.744000</td>\n",
       "      <td>3.841600</td>\n",
       "      <td>256.81</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012</td>\n",
       "      <td>3.349904</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.2500</td>\n",
       "      <td>3.375000</td>\n",
       "      <td>5.062500</td>\n",
       "      <td>256.81</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>2012</td>\n",
       "      <td>2.369075</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>3.2400</td>\n",
       "      <td>5.832000</td>\n",
       "      <td>10.497600</td>\n",
       "      <td>491.40</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>2012</td>\n",
       "      <td>3.338731</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>7.8400</td>\n",
       "      <td>21.952000</td>\n",
       "      <td>61.465600</td>\n",
       "      <td>276.46</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>2012</td>\n",
       "      <td>2.225974</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>7.2900</td>\n",
       "      <td>19.683000</td>\n",
       "      <td>53.144100</td>\n",
       "      <td>479.96</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>2012</td>\n",
       "      <td>2.879901</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.5</td>\n",
       "      <td>4.2025</td>\n",
       "      <td>8.615125</td>\n",
       "      <td>17.661006</td>\n",
       "      <td>479.96</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2012</td>\n",
       "      <td>1.852399</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>10.8900</td>\n",
       "      <td>35.937000</td>\n",
       "      <td>118.592100</td>\n",
       "      <td>576.29</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     year       lnw  intercept  female  widowed  divorced  separated  \\\n",
       "0    2012  1.909542          1       1        0         0          0   \n",
       "1    2012  1.365773          1       1        0         0          0   \n",
       "2    2012  2.540223          1       0        0         0          0   \n",
       "3    2012  1.801091          1       1        0         0          0   \n",
       "4    2012  3.349904          1       0        0         0          0   \n",
       "..    ...       ...        ...     ...      ...       ...        ...   \n",
       "103  2012  2.369075          1       1        0         0          0   \n",
       "104  2012  3.338731          1       0        0         0          0   \n",
       "105  2012  2.225974          1       0        0         1          0   \n",
       "106  2012  2.879901          1       1        0         1          0   \n",
       "107  2012  1.852399          1       1        0         0          0   \n",
       "\n",
       "     nevermarried  hsd08  hsd911  ...  so  we  exp1     exp2       exp3  \\\n",
       "0               0      0       0  ...   0   0  22.0   4.8400  10.648000   \n",
       "1               0      0       1  ...   0   0  30.0   9.0000  27.000000   \n",
       "2               0      0       0  ...   0   0  19.0   3.6100   6.859000   \n",
       "3               0      0       0  ...   0   0  14.0   1.9600   2.744000   \n",
       "4               0      0       0  ...   0   0  15.0   2.2500   3.375000   \n",
       "..            ...    ...     ...  ...  ..  ..   ...      ...        ...   \n",
       "103             1      0       0  ...   0   0  18.0   3.2400   5.832000   \n",
       "104             0      0       0  ...   0   0  28.0   7.8400  21.952000   \n",
       "105             0      0       0  ...   0   0  27.0   7.2900  19.683000   \n",
       "106             0      0       0  ...   0   0  20.5   4.2025   8.615125   \n",
       "107             0      0       0  ...   0   0  33.0  10.8900  35.937000   \n",
       "\n",
       "           exp4  weight  married    ne     sc  \n",
       "0     23.425600  569.43     True  True   True  \n",
       "1     81.000000  625.96     True  True  False  \n",
       "2     13.032100  264.22     True  True  False  \n",
       "3      3.841600  256.81     True  True  False  \n",
       "4      5.062500  256.81     True  True  False  \n",
       "..          ...     ...      ...   ...    ...  \n",
       "103   10.497600  491.40    False  True  False  \n",
       "104   61.465600  276.46     True  True   True  \n",
       "105   53.144100  479.96    False  True  False  \n",
       "106   17.661006  479.96    False  True   True  \n",
       "107  118.592100  576.29     True  True   True  \n",
       "\n",
       "[108 rows x 24 columns]"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cps2012"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "c26d2e2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ln = cps2012.lnw.values # se convierte a un array \n",
    "wei = cps2012.weight.values\n",
    "ex1 = cps2012.exp1.values\n",
    "ex2 = cps2012.exp2.values\n",
    "ex3 = cps2012.exp3.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "318f28f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generation of data\n",
    "\n",
    "y = np.log(  ln  ) # lnlnw\n",
    "c = np.ones( len( y ) ) # Constant\n",
    "x1 = cps2012.female\n",
    "x2 = cps2012.widowed\n",
    "x3 = cps2012.divorced\n",
    "x4 = cps2012.separated\n",
    "x5 = cps2012.nevermarried\n",
    "xw = np.log( wei )\n",
    "x11 = np.log( ex1 )\n",
    "x22 = np.log( ex2 ) \n",
    "x33 = np.log( ex3 ) \n",
    "x12 = np.log( ex1 )*np.log( ex2 )\n",
    "x13 = np.log( ex1 )*np.log( ex3 ) \n",
    "x23 = np.log( ex2 )*np.log( ex3 ) \n",
    "\n",
    "columns = [  \"ln_lnw\", \"female\", \"widowed\", \"divorced\", \"separated\",\n",
    "          \"nevermarried\", \"weight\", \"exp1\", \"exp2\", \"exp3\", \"(exp1)(exp2)\", \"(exp1)(exp3)\", \"(exp2)(exp3)\" ]\n",
    "\n",
    "data_val = np.asarray( [ y, x1, x2, x3, x4, x5, xw, x11, x22, x33, x12, x13, x23 ] ).T # se coloca transpuesta para que cada varaible sea una columna \n",
    "\n",
    "# np.asarray permite crear una matriz a partir de vectores \n",
    "\n",
    "data = pd.DataFrame(  data_val , columns = columns  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "73d42596",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ln_lnw</th>\n",
       "      <th>female</th>\n",
       "      <th>widowed</th>\n",
       "      <th>divorced</th>\n",
       "      <th>separated</th>\n",
       "      <th>nevermarried</th>\n",
       "      <th>weight</th>\n",
       "      <th>exp1</th>\n",
       "      <th>exp2</th>\n",
       "      <th>exp3</th>\n",
       "      <th>(exp1)(exp2)</th>\n",
       "      <th>(exp1)(exp3)</th>\n",
       "      <th>(exp2)(exp3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.646864</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.344636</td>\n",
       "      <td>3.091042</td>\n",
       "      <td>1.576915</td>\n",
       "      <td>2.365372</td>\n",
       "      <td>4.874310</td>\n",
       "      <td>7.311466</td>\n",
       "      <td>3.729990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.311720</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.439286</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>2.197225</td>\n",
       "      <td>3.295837</td>\n",
       "      <td>7.473194</td>\n",
       "      <td>11.209792</td>\n",
       "      <td>7.241694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.932252</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.576782</td>\n",
       "      <td>2.944439</td>\n",
       "      <td>1.283708</td>\n",
       "      <td>1.925562</td>\n",
       "      <td>3.779799</td>\n",
       "      <td>5.669699</td>\n",
       "      <td>2.471858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.588392</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.548337</td>\n",
       "      <td>2.639057</td>\n",
       "      <td>0.672944</td>\n",
       "      <td>1.009417</td>\n",
       "      <td>1.775939</td>\n",
       "      <td>2.663909</td>\n",
       "      <td>0.679281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.208932</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.548337</td>\n",
       "      <td>2.708050</td>\n",
       "      <td>0.810930</td>\n",
       "      <td>1.216395</td>\n",
       "      <td>2.196040</td>\n",
       "      <td>3.294060</td>\n",
       "      <td>0.986412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>0.862499</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.197258</td>\n",
       "      <td>2.890372</td>\n",
       "      <td>1.175573</td>\n",
       "      <td>1.763360</td>\n",
       "      <td>3.397844</td>\n",
       "      <td>5.096766</td>\n",
       "      <td>2.072959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>1.205591</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.622066</td>\n",
       "      <td>3.332205</td>\n",
       "      <td>2.059239</td>\n",
       "      <td>3.088858</td>\n",
       "      <td>6.861805</td>\n",
       "      <td>10.292707</td>\n",
       "      <td>6.360697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>0.800195</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.173703</td>\n",
       "      <td>3.295837</td>\n",
       "      <td>1.986504</td>\n",
       "      <td>2.979755</td>\n",
       "      <td>6.547192</td>\n",
       "      <td>9.820787</td>\n",
       "      <td>5.919295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1.057756</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.173703</td>\n",
       "      <td>3.020425</td>\n",
       "      <td>1.435680</td>\n",
       "      <td>2.153519</td>\n",
       "      <td>4.336362</td>\n",
       "      <td>6.504544</td>\n",
       "      <td>3.091764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>0.616481</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.356611</td>\n",
       "      <td>3.496508</td>\n",
       "      <td>2.387845</td>\n",
       "      <td>3.581767</td>\n",
       "      <td>8.349118</td>\n",
       "      <td>12.523677</td>\n",
       "      <td>8.552705</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       ln_lnw  female  widowed  divorced  separated  nevermarried    weight  \\\n",
       "0    0.646864     1.0      0.0       0.0        0.0           0.0  6.344636   \n",
       "1    0.311720     1.0      0.0       0.0        0.0           0.0  6.439286   \n",
       "2    0.932252     0.0      0.0       0.0        0.0           0.0  5.576782   \n",
       "3    0.588392     1.0      0.0       0.0        0.0           0.0  5.548337   \n",
       "4    1.208932     0.0      0.0       0.0        0.0           0.0  5.548337   \n",
       "..        ...     ...      ...       ...        ...           ...       ...   \n",
       "103  0.862499     1.0      0.0       0.0        0.0           1.0  6.197258   \n",
       "104  1.205591     0.0      0.0       0.0        0.0           0.0  5.622066   \n",
       "105  0.800195     0.0      0.0       1.0        0.0           0.0  6.173703   \n",
       "106  1.057756     1.0      0.0       1.0        0.0           0.0  6.173703   \n",
       "107  0.616481     1.0      0.0       0.0        0.0           0.0  6.356611   \n",
       "\n",
       "         exp1      exp2      exp3  (exp1)(exp2)  (exp1)(exp3)  (exp2)(exp3)  \n",
       "0    3.091042  1.576915  2.365372      4.874310      7.311466      3.729990  \n",
       "1    3.401197  2.197225  3.295837      7.473194     11.209792      7.241694  \n",
       "2    2.944439  1.283708  1.925562      3.779799      5.669699      2.471858  \n",
       "3    2.639057  0.672944  1.009417      1.775939      2.663909      0.679281  \n",
       "4    2.708050  0.810930  1.216395      2.196040      3.294060      0.986412  \n",
       "..        ...       ...       ...           ...           ...           ...  \n",
       "103  2.890372  1.175573  1.763360      3.397844      5.096766      2.072959  \n",
       "104  3.332205  2.059239  3.088858      6.861805     10.292707      6.360697  \n",
       "105  3.295837  1.986504  2.979755      6.547192      9.820787      5.919295  \n",
       "106  3.020425  1.435680  2.153519      4.336362      6.504544      3.091764  \n",
       "107  3.496508  2.387845  3.581767      8.349118     12.523677      8.552705  \n",
       "\n",
       "[108 rows x 13 columns]"
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "e8ae559c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# selecting columns\n",
    "X = data.iloc[ : ,1:]\n",
    "y = data.ln_lnw\n",
    "lista = data.iloc[ : , :7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "6e5c0891",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "class OLSRegClass( object ):\n",
    "    \n",
    "    def __init__( self, X : pd.DataFrame , y : pd.Series , lista, RobustStandardError = True):\n",
    "    \n",
    "        if not isinstance( X, pd.DataFrame ):\n",
    "            raise TypeError( \"X must be a pd.DataFrame.\" )\n",
    "\n",
    "        if not isinstance( y , pd.Series ):\n",
    "            raise TypeError( \"y must be a pd.Series.\" )\n",
    "            \n",
    "        # asignando atributos de la clase\n",
    "        \n",
    "        self.X = X\n",
    "        self.y = y\n",
    "        self.lista = lista\n",
    "        self.RobustStandardError = RobustStandardError\n",
    "\n",
    "        self.X[ 'Intercept' ] = 1\n",
    "        # colcondo la columna Intercept en la primera columna \n",
    "        \n",
    "        cols = self.X.columns.tolist() # nombre de variable a lista \n",
    "        new_cols_orders = [cols[ -1 ]] + cols[ 5:-1 ]  # juntamos listas\n",
    "\n",
    "            \n",
    "        # [cols[ -1 ]] la jala la ultima fila , cols[ 0:-1 ]  primera fila hasta la fila 9\n",
    "            \n",
    "        self.X = self.X.loc[ : , new_cols_orders ] # usamos .loc que filtra por nombre de filas o columnas \n",
    "\n",
    "        \n",
    "        # creando nuevos atributos \n",
    "        \n",
    "        self.X_np = self.X.values  # Dataframe a multi array\n",
    "        self.y_np = y.values.reshape( -1 , 1 ) # de objeto serie a array columna \n",
    "        self.lista = self.X.columns.tolist() # nombre de la base de datos como objeto lista\n",
    "\n",
    "        \n",
    "# Creando Métodos #\n",
    "\n",
    "######################      MÉTODO 1     ###############################################\n",
    "    \n",
    "    def reg_beta_OLS( self ):\n",
    "        # X, y en Matrix, y vector columna respectivamente \n",
    "        \n",
    "        X_np = self.X_np\n",
    "        y_np = self.y_np\n",
    "\n",
    "        # beta_ols\n",
    "        beta_ols = np.linalg.inv( X_np.T @ X_np ) @ ( X_np.T @ y_np )\n",
    "\n",
    "        # columnas de X\n",
    "        index_names = self.lista\n",
    "        # Output\n",
    "        beta_OLS_output = pd.DataFrame( beta_ols , index = index_names , columns = [ 'Coef.' ] )\n",
    "        \n",
    "        # Dataframe de coeffientes como atributo \n",
    "        \n",
    "        self.beta_OLS = beta_OLS_output\n",
    "        \n",
    "        return beta_OLS_output\n",
    "    \n",
    "    \n",
    "######################      MÉTODO 2     ###############################################\n",
    "    \n",
    "    def var_stderrors_cfdinterval( self ):\n",
    "        \n",
    "        ### VARIANZA  ###\n",
    "        \n",
    "        # Se corre la función beta_OLS que estima el vector de coeficientes\n",
    "        self.reg_beta_OLS()\n",
    "        \n",
    "        # usaremos atributos pero con un nombre más simple\n",
    "        X_np = self.X_np\n",
    "        y_np = self.y_np\n",
    "        listaf = self.lista\n",
    "        \n",
    "        # beta_ols\n",
    "        beta_OLS = self.beta_OLS.values.reshape( - 1, 1 ) # Dataframe a vector columna \n",
    "\n",
    "        # errors\n",
    "        e = y_np - ( X_np @ beta_OLS )\n",
    "\n",
    "        # error variance\n",
    "        N = X_np.shape[ 0 ]\n",
    "        total_parameters = X_np.shape[ 1 ]\n",
    "        error_var = ( (e.T @ e)[ 0 ] )/( N - total_parameters )\n",
    "\n",
    "        # Varianza\n",
    "        var_OLS =  error_var * np.linalg.inv( X_np.T @ X_np )\n",
    "        \n",
    "        # asignando output de la función def reg_var_OLS( self ):   como atributo  self.var_OLS\n",
    "        index_names = listaf\n",
    "        var_OLS_output = pd.DataFrame( var_OLS , index = index_names , columns = index_names )\n",
    "        self.var_OLS = var_OLS_output\n",
    "\n",
    "        \n",
    "        ### STANDAR ERRORS  ###\n",
    "       \n",
    "        # var y beta\n",
    "        beta_OLS = self.beta_OLS.values.reshape( -1, 1 )   # -1 significa cualquier número de filas\n",
    "        var_OLS  = self.var_OLS.values\n",
    "        \n",
    "        # standard errors\n",
    "        beta_stderror = np.sqrt( np.diag( var_OLS ) )\n",
    "        \n",
    "        table_data0 = {  \"Std.Err.\" : beta_stderror.ravel()}\n",
    "        \n",
    "        # defining index names\n",
    "        index_names0 = listaf\n",
    "        \n",
    "        # defining a pandas dataframe \n",
    "        beta_se_output = pd.DataFrame( table_data0 , index = index_names0 )\n",
    "        self.beta_se = beta_se_output\n",
    "\n",
    "        ### Confidence interval ###\n",
    "        \n",
    "        up_bd = beta_OLS.ravel() + 1.96*beta_stderror\n",
    "        lw_bd = beta_OLS.ravel() - 1.96*beta_stderror\n",
    "        \n",
    "        table_data1 = {\"[0.025\"   : lw_bd.ravel(),\n",
    "                       \"0.975]\"   : up_bd.ravel()}\n",
    "        \n",
    "        # defining index names\n",
    "        index_names1 = listaf\n",
    "        \n",
    "        # defining a pandas dataframe \n",
    "        confiden_interval_output = pd.DataFrame( table_data1 , index = index_names1 )\n",
    "        self_confiden_interval = confiden_interval_output\n",
    "        \n",
    "        return var_OLS_output, beta_se_output, confiden_interval_output\n",
    "    \n",
    "    \n",
    "######################      MÉTODO 3     ###############################################\n",
    "    \n",
    "    def robust_var_se_cfdinterval(self):\n",
    "    \n",
    "        # Se corre la función beta_OLS que estima el vector de coeficientes\n",
    "        self.reg_beta_OLS()\n",
    "    \n",
    "        # usaré atributos pero con un nombre más simple\n",
    "        X_np = self.X_np\n",
    "        y_np = self.y_np\n",
    "        listaf = self.lista\n",
    "        \n",
    "        beta = np.linalg.inv(X_np.T @ X_np) @ ((X_np.T) @ y )\n",
    "        y_est = X_np @ beta\n",
    "        n = X_np.shape[0]\n",
    "        k = X_np.shape[1] - 1 \n",
    "        nk = n - k  \n",
    "\n",
    "        matrix_robust = np.diag(list( map( lambda x: x**2 , y - y_est)))\n",
    "        Var = np.linalg.inv(X_np.T @ X_np) @ X_np.T @ matrix_robust @ X_np @ np.linalg.inv(X_np.T @ X_np)\n",
    "        sd = np.sqrt( np.diag(Var) )\n",
    "        var = sd**2\n",
    "        t_est = np.absolute(beta/sd)\n",
    "        lower_bound = beta-1.96*sd\n",
    "        upper_bound = beta+1.96*sd\n",
    "        SCR = sum(list( map( lambda x: x**2 , y - y_est)   ))\n",
    "        SCT = sum(list( map( lambda x: x**2 , y - np.mean(y_est)   )))\n",
    "        R2 = 1-SCR/SCT\n",
    "        rmse = (SCR/n)**0.5\n",
    "        table = pd.DataFrame( {\"ols\": beta , \"standar_error\" : sd , \"Lower_bound\":lower_bound, \"Upper_bound\":upper_bound} ) \n",
    "        \n",
    "        fit = {\"Root_MSE\":rmse, \"R2\": R2}\n",
    "        \n",
    "        index_names7 = listaf\n",
    "        var_robust_output = pd.DataFrame( Var , index = index_names7 , columns = index_names7 )\n",
    "        self.var_robust = var_robust_output\n",
    "        \n",
    "        \n",
    "        return table, fit, var_robust_output\n",
    "        \n",
    "######################      MÉTODO 4     ###############################################  \n",
    "    \n",
    "    def R2_rootMSE( self ) :\n",
    "        \n",
    "        ############\n",
    "        ###  R2  ###\n",
    "        \n",
    "        # Se corre la función beta_OLS_Reg que estima el vector de coeficientes\n",
    "        self.reg_beta_OLS()\n",
    "        \n",
    "        y_est    = self.X_np @ self.beta_OLS   # y estimado\n",
    "        error    = self.y_np - y_est           # vector de errores\n",
    "        self.SCR = np.sum(np.square(error))    # Suma del Cuadrado de los Residuos\n",
    "        SCT      = np.sum(np.square(self.y_np - np.mean(self.X_np) ))  # Suma de Cuadrados Total\n",
    "\n",
    "        self.R2  = 1 - self.SCR/SCT\n",
    "\n",
    "                \n",
    "        #################\n",
    "        ### root MSE  ###\n",
    "        \n",
    "        for i in error.values:\n",
    "            \n",
    "            suma = 0\n",
    "            suma = np.sqrt( suma + (i**2) / self.X_np.shape[0] )\n",
    "            \n",
    "        self.rootMSE = suma.tolist()\n",
    "        \n",
    "        return self.R2, self.rootMSE\n",
    "    \n",
    "\n",
    "######################      MÉTODO 5     ###############################################\n",
    "    \n",
    "    def output( self ):\n",
    "        \n",
    "        self.reg_beta_OLS()\n",
    "        self.R2_rootMSE()\n",
    "        self.var_stderrors_cfdinterval()\n",
    "        \n",
    "        # var y beta\n",
    "        beta_OLS = self.beta_OLS.values.reshape( -1, 1 )   # -1 significa cualquier número de filas\n",
    "        var_OLS  = self.var_OLS.values\n",
    "        \n",
    "        # standard errors\n",
    "        beta_stderror = np.sqrt( np.diag( var_OLS ) )\n",
    "        \n",
    "        # confidence interval\n",
    "        up_bd = beta_OLS.ravel() + 1.96*beta_stderror\n",
    "        lw_bd = beta_OLS.ravel() - 1.96*beta_stderror\n",
    "        \n",
    "        table_data2 = {'Coef.'    : beta_OLS.ravel(),\n",
    "                       'Std.Err.' : beta_stderror.ravel(),\n",
    "                       '[0.025'   : lw_bd.ravel(),\n",
    "                       '0.975]'   : up_bd.ravel(),\n",
    "                       'R2'       : self.R2,\n",
    "                       'rootMSE'  : self.rootMSE}\n",
    "        \n",
    "        return table_data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "abd0335d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>weight</th>\n",
       "      <th>exp1</th>\n",
       "      <th>exp2</th>\n",
       "      <th>exp3</th>\n",
       "      <th>(exp1)(exp2)</th>\n",
       "      <th>(exp1)(exp3)</th>\n",
       "      <th>(exp2)(exp3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6.344636</td>\n",
       "      <td>3.091042</td>\n",
       "      <td>1.576915</td>\n",
       "      <td>2.365372</td>\n",
       "      <td>4.874310</td>\n",
       "      <td>7.311466</td>\n",
       "      <td>3.729990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6.439286</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>2.197225</td>\n",
       "      <td>3.295837</td>\n",
       "      <td>7.473194</td>\n",
       "      <td>11.209792</td>\n",
       "      <td>7.241694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>5.576782</td>\n",
       "      <td>2.944439</td>\n",
       "      <td>1.283708</td>\n",
       "      <td>1.925562</td>\n",
       "      <td>3.779799</td>\n",
       "      <td>5.669699</td>\n",
       "      <td>2.471858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>5.548337</td>\n",
       "      <td>2.639057</td>\n",
       "      <td>0.672944</td>\n",
       "      <td>1.009417</td>\n",
       "      <td>1.775939</td>\n",
       "      <td>2.663909</td>\n",
       "      <td>0.679281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>5.548337</td>\n",
       "      <td>2.708050</td>\n",
       "      <td>0.810930</td>\n",
       "      <td>1.216395</td>\n",
       "      <td>2.196040</td>\n",
       "      <td>3.294060</td>\n",
       "      <td>0.986412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>1</td>\n",
       "      <td>6.197258</td>\n",
       "      <td>2.890372</td>\n",
       "      <td>1.175573</td>\n",
       "      <td>1.763360</td>\n",
       "      <td>3.397844</td>\n",
       "      <td>5.096766</td>\n",
       "      <td>2.072959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>1</td>\n",
       "      <td>5.622066</td>\n",
       "      <td>3.332205</td>\n",
       "      <td>2.059239</td>\n",
       "      <td>3.088858</td>\n",
       "      <td>6.861805</td>\n",
       "      <td>10.292707</td>\n",
       "      <td>6.360697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>1</td>\n",
       "      <td>6.173703</td>\n",
       "      <td>3.295837</td>\n",
       "      <td>1.986504</td>\n",
       "      <td>2.979755</td>\n",
       "      <td>6.547192</td>\n",
       "      <td>9.820787</td>\n",
       "      <td>5.919295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1</td>\n",
       "      <td>6.173703</td>\n",
       "      <td>3.020425</td>\n",
       "      <td>1.435680</td>\n",
       "      <td>2.153519</td>\n",
       "      <td>4.336362</td>\n",
       "      <td>6.504544</td>\n",
       "      <td>3.091764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>1</td>\n",
       "      <td>6.356611</td>\n",
       "      <td>3.496508</td>\n",
       "      <td>2.387845</td>\n",
       "      <td>3.581767</td>\n",
       "      <td>8.349118</td>\n",
       "      <td>12.523677</td>\n",
       "      <td>8.552705</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Intercept    weight      exp1      exp2      exp3  (exp1)(exp2)  \\\n",
       "0            1  6.344636  3.091042  1.576915  2.365372      4.874310   \n",
       "1            1  6.439286  3.401197  2.197225  3.295837      7.473194   \n",
       "2            1  5.576782  2.944439  1.283708  1.925562      3.779799   \n",
       "3            1  5.548337  2.639057  0.672944  1.009417      1.775939   \n",
       "4            1  5.548337  2.708050  0.810930  1.216395      2.196040   \n",
       "..         ...       ...       ...       ...       ...           ...   \n",
       "103          1  6.197258  2.890372  1.175573  1.763360      3.397844   \n",
       "104          1  5.622066  3.332205  2.059239  3.088858      6.861805   \n",
       "105          1  6.173703  3.295837  1.986504  2.979755      6.547192   \n",
       "106          1  6.173703  3.020425  1.435680  2.153519      4.336362   \n",
       "107          1  6.356611  3.496508  2.387845  3.581767      8.349118   \n",
       "\n",
       "     (exp1)(exp3)  (exp2)(exp3)  \n",
       "0        7.311466      3.729990  \n",
       "1       11.209792      7.241694  \n",
       "2        5.669699      2.471858  \n",
       "3        2.663909      0.679281  \n",
       "4        3.294060      0.986412  \n",
       "..            ...           ...  \n",
       "103      5.096766      2.072959  \n",
       "104     10.292707      6.360697  \n",
       "105      9.820787      5.919295  \n",
       "106      6.504544      3.091764  \n",
       "107     12.523677      8.552705  \n",
       "\n",
       "[108 rows x 8 columns]"
      ]
     },
     "execution_count": 341,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = OLSRegClass( X, y, lista)\n",
    "\n",
    "# Atributo de las variables \n",
    "\n",
    "A.X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "id": "471ae9b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0.646864\n",
       "1      0.311720\n",
       "2      0.932252\n",
       "3      0.588392\n",
       "4      1.208932\n",
       "         ...   \n",
       "103    0.862499\n",
       "104    1.205591\n",
       "105    0.800195\n",
       "106    1.057756\n",
       "107    0.616481\n",
       "Name: ln_lnw, Length: 108, dtype: float64"
      ]
     },
     "execution_count": 342,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "dac40599",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Coef.</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>3.188650e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weight</th>\n",
       "      <td>2.312000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exp1</th>\n",
       "      <td>-1.384813e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exp2</th>\n",
       "      <td>-2.030916e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exp3</th>\n",
       "      <td>1.815548e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(exp1)(exp2)</th>\n",
       "      <td>-3.750000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(exp1)(exp3)</th>\n",
       "      <td>2.109375e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(exp2)(exp3)</th>\n",
       "      <td>4.687500e-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Coef.\n",
       "Intercept     3.188650e+12\n",
       "weight        2.312000e-01\n",
       "exp1         -1.384813e+12\n",
       "exp2         -2.030916e+12\n",
       "exp3          1.815548e+12\n",
       "(exp1)(exp2) -3.750000e-01\n",
       "(exp1)(exp3)  2.109375e-01\n",
       "(exp2)(exp3)  4.687500e-02"
      ]
     },
     "execution_count": 343,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.reg_beta_OLS()  # Resultado del método reg OLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "42a71d89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(                 Intercept    weight          exp1          exp2  \\\n",
       " Intercept     3.508713e+12 -0.168439 -1.522627e+12  4.709794e+11   \n",
       " weight       -2.256574e-01  0.014918  6.099939e-02  3.769984e-03   \n",
       " exp1         -1.523815e+12  0.036070  6.612683e+11 -2.045437e+11   \n",
       " exp2          3.475491e+11  0.020307 -1.516955e+11  3.695393e+11   \n",
       " exp3          1.295141e+12 -0.039286 -5.617959e+11  1.613982e+11   \n",
       " (exp1)(exp2) -6.459732e+11  0.029641  2.805426e+11 -1.479965e+11   \n",
       " (exp1)(exp3) -1.185471e+10 -0.013791  5.148436e+09 -4.881184e+10   \n",
       " (exp2)(exp3)  2.212517e+11 -0.003710 -9.608841e+10  7.373810e+10   \n",
       " \n",
       "                       exp3  (exp1)(exp2)  (exp1)(exp3)  (exp2)(exp3)  \n",
       " Intercept     1.202918e+12 -5.229542e+11 -8.942776e+10  2.193859e+11  \n",
       " weight       -5.413574e-02  3.587093e-02 -1.022241e-02 -7.564230e-03  \n",
       " exp1         -5.224208e+11  2.271161e+11  3.883798e+10 -9.527808e+10  \n",
       " exp2          8.694858e+10 -9.184224e+10 -6.175452e+10  6.126590e+10  \n",
       " exp3          1.472972e+11 -1.040522e+11  4.016546e+10  1.480289e+10  \n",
       " (exp1)(exp2) -1.160764e+11  1.264719e+11 -3.166655e+10 -2.632402e+10  \n",
       " (exp1)(exp3)  6.386791e+10 -4.541265e+10  1.592478e+10  7.175158e+09  \n",
       " (exp2)(exp3)  6.758192e+09 -1.945097e+10  2.593123e+09  5.187095e+09  ,\n",
       "                   Std.Err.\n",
       " Intercept     1.873156e+06\n",
       " weight        1.221379e-01\n",
       " exp1          8.131840e+05\n",
       " exp2          6.078975e+05\n",
       " exp3          3.837932e+05\n",
       " (exp1)(exp2)  3.556289e+05\n",
       " (exp1)(exp3)  1.261934e+05\n",
       " (exp2)(exp3)  7.202149e+04,\n",
       "                     [0.025        0.975]\n",
       " Intercept     3.188646e+12  3.188653e+12\n",
       " weight       -8.190362e-03  4.705903e-01\n",
       " exp1         -1.384815e+12 -1.384811e+12\n",
       " exp2         -2.030917e+12 -2.030915e+12\n",
       " exp3          1.815547e+12  1.815549e+12\n",
       " (exp1)(exp2) -6.970329e+05  6.970322e+05\n",
       " (exp1)(exp3) -2.473389e+05  2.473393e+05\n",
       " (exp2)(exp3) -1.411621e+05  1.411622e+05)"
      ]
     },
     "execution_count": 344,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.var_stderrors_cfdinterval() # Matriz de var y cov, sd y confidence interval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "36e9bd53",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/zl/dwjs19r53hv4ng4wbr0b4srm0000gn/T/ipykernel_42554/3219601434.py:152: RuntimeWarning: invalid value encountered in sqrt\n",
      "  sd = np.sqrt( np.diag(Var) )\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(            ols  standar_error  Lower_bound  Upper_bound\n",
       " 0  3.188650e+12            NaN          NaN          NaN\n",
       " 1  2.312000e-01       0.106487     0.022485     0.439915\n",
       " 2 -1.384813e+12            NaN          NaN          NaN\n",
       " 3 -2.030916e+12            NaN          NaN          NaN\n",
       " 4  1.815548e+12            NaN          NaN          NaN\n",
       " 5 -3.750000e-01       0.230666    -0.827105     0.077105\n",
       " 6  2.109375e-01       0.084685     0.044954     0.376921\n",
       " 7  4.687500e-02       0.033553    -0.018889     0.112639,\n",
       " {'Root_MSE': 0.38702207433645885, 'R2': -0.6657433395568355},\n",
       "                  Intercept        weight          exp1          exp2  \\\n",
       " Intercept    -6.761294e+10  5.069708e+09  1.841976e+10  3.265294e+09   \n",
       " weight       -1.705086e-01  1.133951e-02  4.523530e-02  4.516671e-03   \n",
       " exp1          3.542932e+10 -2.201746e+09 -1.090204e+10 -8.479164e+08   \n",
       " exp2          4.109676e+10 -3.229000e+09 -1.081535e+10 -2.044731e+09   \n",
       " exp3         -4.334018e+10  2.886582e+09  1.305646e+10  1.032711e+09   \n",
       " (exp1)(exp2) -3.334106e-01  2.154035e-02  8.960376e-02  7.399946e-03   \n",
       " (exp1)(exp3)  1.562500e-01 -1.001835e-02 -4.223633e-02 -3.082275e-03   \n",
       " (exp2)(exp3)  3.338623e-02 -2.175875e-03 -9.002686e-03 -6.256104e-04   \n",
       " \n",
       "                       exp3  (exp1)(exp2)  (exp1)(exp3)  (exp2)(exp3)  \n",
       " Intercept    -1.649820e+10  1.160032e+10 -3.543179e+09 -2.018624e+09  \n",
       " weight       -4.147033e-02  2.783473e-02 -7.845354e-03 -5.283871e-03  \n",
       " exp1          8.904519e+09 -6.238933e+09  1.802301e+09  1.141336e+09  \n",
       " exp2          1.036568e+10 -7.311260e+09  2.116320e+09  1.257054e+09  \n",
       " exp3         -1.095146e+10  7.266514e+09 -1.855335e+09 -1.435356e+09  \n",
       " (exp1)(exp2) -7.962573e-02  5.320682e-02 -1.522332e-02 -1.006715e-02  \n",
       " (exp1)(exp3)  3.710938e-02 -2.502441e-02  7.171631e-03  4.695892e-03  \n",
       " (exp2)(exp3)  8.071899e-03 -5.294800e-03  1.457214e-03  1.125813e-03  )"
      ]
     },
     "execution_count": 345,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.robust_var_se_cfdinterval()  # standar error, confidence interval y matriz de var y cov robusta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "5d2fb628",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Coef.    0.971815\n",
       " dtype: float64,\n",
       " [0.08105753598082706])"
      ]
     },
     "execution_count": 346,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.R2_rootMSE() # Hallando el R2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "id": "b932a9d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Coef.': array([ 3.18864960e+12,  2.31199987e-01, -1.38481293e+12, -2.03091591e+12,\n",
       "         1.81554825e+12, -3.75000000e-01,  2.10937500e-01,  4.68750000e-02]),\n",
       " 'Std.Err.': array([1.87315594e+06, 1.22137933e-01, 8.13184046e+05, 6.07897457e+05,\n",
       "        3.83793156e+05, 3.55628858e+05, 1.26193437e+05, 7.20214900e+04]),\n",
       " '[0.025': array([ 3.18864593e+12, -8.19036164e-03, -1.38481452e+12, -2.03091710e+12,\n",
       "         1.81554750e+12, -6.97032936e+05, -2.47338926e+05, -1.41162073e+05]),\n",
       " '0.975]': array([ 3.18865327e+12,  4.70590336e-01, -1.38481133e+12, -2.03091472e+12,\n",
       "         1.81554900e+12,  6.97032186e+05,  2.47339348e+05,  1.41162167e+05]),\n",
       " 'R2': Coef.    0.971815\n",
       " dtype: float64,\n",
       " 'rootMSE': [0.08105753598082706]}"
      ]
     },
     "execution_count": 347,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.output() # Método final de resultados"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
