y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
Matrix_robust <- diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6,x7)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% M %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
getwd()
user <- Sys.getenv("USERNAME")  # username
print(user)
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab3/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../data/Region_Junin.xlsx")
junin_data = read_excel("../../../data/Region_Junin.xlsx")
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../data/Region_Junin.xlsx")
junin_data = read_excel("../../../data/Region_Junin.xlsx")
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../../data/Region_Junin.xlsx")
View(junin_data)
names(junin_data)
str(junin_data)
sapply(str,junin_data)
sapply(junin_data, class)
summarise(junin_data)
summary(junin_data)
sum(is.na(junin_data))
sapply(junin_data, sum(is.nac()))
sapply(junin_data, sum(is.na()))
sapply(junin_data, sum(is.na)
sapply(junin_data, sum(is.na))
sapply(junin_data, is.na)
sum( sapply(junin_data, is.na) )
sapply(junin_data, is.na)
sapply( junin_data, sum(is.na) )
sapply( junin_data, is.na )
any(is.na( junin_data ))
sapply( junin_data, sum(is.na(x)) )
sapply( junin_data, function(x) sum(is.na(x)) )
junin_data <- junin_data %>% rename(
comunidad = place,
homxlee= men_not_read,
mujerxlee = women_not_read,
totalxlee = total_not_read
)
junin_data <- junin_data %>% rename(
comunidad = Place,
homxlee= men_not_read,
mujerxlee = women_not_read,
totalxlee = total_not_read
)
View(junin_data)
unique(junin_data['comunidad'])
unique(junin_data['District'])
junin_data['total_pob'] = junin_data['peruvian_men'] + junin_data['peruvian_women']+
junin_data['foreign_men'] + junin_data['foreign_women']
View(junin_data)
junin_data['var_women_read'] =  junin_data$mujerxlee/junin_data$totalxlee
junin_data['var_men_read'] =  junin_data$homxlee/junin_data$totalxlee
junin_data <- junin_data[junin_data$District %in% c("Ciudad del Cerro",
"Jauja", "Acolla", "San Gerónimo", "Tarma",
"Oroya y Concepción"),]
#######################################
" Homework 2 - solution  "
" @author: Roberto Mendoza "
" @date: 19/09/2020 "
" @code: This code clean dataset from native Census"
#######################################
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../../data/Region_Junin.xlsx")
#1. ----------- Nombre de las variables ----------------------
names(junin_data)
#2. ---------- Type de variables y estadísticas ----------
str(junin_data)
sapply(junin_data, class)
summary(junin_data) # main statistics of numeric variables
# 3. ------- Missing values --------------
sum(is.na(junin_data)) # total missing
sapply( junin_data, function(x) sum(is.na(x)) ) # total missing by variable
# 4. ------- Change variable's name --------------
# %>%  Ctrl + shift + m (shortcut)
junin_data <- junin_data %>% rename(
comunidad = Place,
homxlee = men_not_read,
mujerxlee = women_not_read,
totalxlee = total_not_read
)
# 5. ------- unique values  --------------
unique(junin_data['comunidad'])
unique(junin_data['District'])
# 6. ------- Percentage variables  --------------
junin_data['total_pob'] = junin_data['peruvian_men'] + junin_data['peruvian_women']+
junin_data['foreign_men'] + junin_data['foreign_women']
junin_data['var_women_read'] =  junin_data$mujerxlee/junin_data$totalxlee
junin_data['var_men_read'] =  junin_data$homxlee/junin_data$totalxlee
junin_data <- junin_data[junin_data$District %in% c("CIUDAD DEL CERRO",
"JAUJA", "ACOLLA", "SAN GERONIMO", "TARMA",
"OROYA Y CONCEPCION"),]
#######################################
" Homework 2 - solution  "
" @author: Roberto Mendoza "
" @date: 19/09/2020 "
" @code: This code clean dataset from native Census"
#######################################
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../../data/Region_Junin.xlsx")
#1. ----------- Nombre de las variables ----------------------
names(junin_data)
#2. ---------- Type de variables y estadísticas ----------
str(junin_data)
sapply(junin_data, class)
summary(junin_data) # main statistics of numeric variables
# 3. ------- Missing values --------------
sum(is.na(junin_data)) # total missing
sapply( junin_data, function(x) sum(is.na(x)) ) # total missing by variable
# 4. ------- Change variable's name --------------
# %>%  Ctrl + shift + m (shortcut)
junin_data <- junin_data %>% rename(
comunidad = Place,
homxlee = men_not_read,
mujerxlee = women_not_read,
totalxlee = total_not_read
)
# 5. ------- unique values  --------------
unique(junin_data['comunidad'])
unique(junin_data['District'])
# 6. ------- Percentage variables  --------------
junin_data['total_pob'] = junin_data['peruvian_men'] + junin_data['peruvian_women']+
junin_data['foreign_men'] + junin_data['foreign_women']
junin_data['var_women_read'] =  junin_data$mujerxlee/junin_data$totalxlee
junin_data['var_men_read'] =  junin_data$homxlee/junin_data$totalxlee
# 7. ------- Dataset  --------------
junin_data <- junin_data[junin_data$District %in% c("CIUDAD DEL CERRO",
"JAUJA", "ACOLLA", "SAN GERÓNIMO", "TARMA",
"OROYA Y CONCEPCIÓN"),]
#######################################
" Homework 2 - solution  "
" @author: Roberto Mendoza "
" @date: 19/09/2020 "
" @code: This code clean dataset from native Census"
#######################################
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../../data/Region_Junin.xlsx")
#1. ----------- Nombre de las variables ----------------------
names(junin_data)
#2. ---------- Type de variables y estadísticas ----------
str(junin_data)
sapply(junin_data, class)
summary(junin_data) # main statistics of numeric variables
# 3. ------- Missing values --------------
sum(is.na(junin_data)) # total missing
sapply( junin_data, function(x) sum(is.na(x)) ) # total missing by variable
# 4. ------- Change variable's name --------------
# %>%  Ctrl + shift + m (shortcut)
junin_data <- junin_data %>% rename(
comunidad = Place,
homxlee = men_not_read,
mujerxlee = women_not_read,
totalxlee = total_not_read
)
# 5. ------- unique values  --------------
unique(junin_data['comunidad'])
unique(junin_data['District'])
# 6. ------- Percentage variables  --------------
junin_data['total_pob'] = junin_data['peruvian_men'] + junin_data['peruvian_women']+
junin_data['foreign_men'] + junin_data['foreign_women']
junin_data['var_women_read'] =  junin_data$mujerxlee/junin_data$totalxlee
junin_data['var_men_read'] =  junin_data$homxlee/junin_data$totalxlee
# 7. ------- Dataset  --------------
junin_data <- junin_data[junin_data$District %in% c("CIUDAD DEL CERRO",
"JAUJA", "ACOLLA", "SAN GERÓNIMO", "TARMA",
"OROYA","CONCEPCIÓN"),]
junin_data <- junin_data[junin_data$natives > 0 &  junin_data$mestizos  > 0]
junin_data <- junin_data %>% filter( junin_data$natives > 0 &  junin_data$mestizos  > 0 )
write.csv(base, '../../../data/Base_cleaned.csv')
write.csv(base, '../../../data/Base_cleaned.xlsx')
write.csv(junin_data, '../../../data/Base_cleaned.csv')
write.csv(junin_data, '../../../data/Base_cleaned.xlsx')
#######################################
" Homework 2 - solution  "
" @author: Roberto Mendoza "
" @date: 19/09/2020 "
" @code: This code clean dataset from native Census"
#######################################
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Trabajo_grupal/WG2/Solución") ) # set directorio
junin_data = read_excel("../../../data/Region_Junin.xlsx")
#1. ----------- Nombre de las variables ----------------------
names(junin_data)
#2. ---------- Type de variables y estadísticas ----------
str(junin_data)
sapply(junin_data, class)
summary(junin_data) # main statistics of numeric variables
# 3. ------- Missing values --------------
sum(is.na(junin_data)) # total missing
sapply( junin_data, function(x) sum(is.na(x)) ) # total missing by variable
# 4. ------- Change variable's name --------------
# %>%  Ctrl + shift + m (shortcut)
junin_data <- junin_data %>% rename(
comunidad = Place,
homxlee = men_not_read,
mujerxlee = women_not_read,
totalxlee = total_not_read
)
# 5. ------- unique values  --------------
unique(junin_data['comunidad'])
unique(junin_data['District'])
# 6. ------- Percentage variables  --------------
junin_data['total_pob'] = junin_data['peruvian_men'] + junin_data['peruvian_women']+
junin_data['foreign_men'] + junin_data['foreign_women']
junin_data['var_women_read'] =  junin_data$mujerxlee/junin_data$totalxlee
junin_data['var_men_read'] =  junin_data$homxlee/junin_data$totalxlee
# 7. ------- Dataset  --------------
junin_data <- junin_data[junin_data$District %in% c("CIUDAD DEL CERRO",
"JAUJA", "ACOLLA", "SAN GERÓNIMO", "TARMA",
"OROYA","CONCEPCIÓN"),]
junin_data <- junin_data %>% filter( junin_data$natives > 0 &  junin_data$mestizos  > 0 )
junin_data <- junin_data[,c('District','comunidad','total_pob','var_women_read','var_men_read')]
write.csv(junin_data, '../../../data/Base_cleaned.csv')
write.csv(junin_data, '../../../data/Base_cleaned.xlsx')
# instalar paquete readxl para importar la base de datos
install.packages("readxl")
#cargar paquete readxl
library(readxl)
#importamos los datos
junin_data <- read_excel("C:\\Users\\claud\\Downloads\\Region_Junin.xlsx",
range = 'B1:AP198')
install.packages("readxl")
