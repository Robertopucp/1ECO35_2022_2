n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
Matrix_robust <- diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6,x7)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% M %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
library(haven)
library(dplyr)
library(stringr)   # grep
library(fastDummies)
# tydiverse: ggplot , dplyr other libraries
"1.0 Set Directorio"
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab7") ) # set directorio
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab7") ) # set directorio
"2.0 Load dataset de ENAHO"
enaho01 <- read_dta("../../../enaho/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta")
# tibble dataset
enaho01$dominio
enaho01 <- data.frame(
read_dta("../../../enaho/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta")
)
#data.frame dataset
enaho01
enaho01$dominio
# Check labels
# %>% Ctrl + shift + m
enaho01$p110 %>% attr('labels') # value labels
enaho01$p110 %>% attr('label') # var label
"Módulo02"
enaho02 = data.frame(
read_dta("../../../enaho/2020/737-Modulo02/737-Modulo02/enaho01-2020-200.dta")
)
enaho03 = data.frame(
read_dta("../../../enaho/2020/737-Modulo03/737-Modulo03/enaho01a-2020-300.dta"))
enaho04 = data.frame(
read_dta("../../../enaho/2020/737-Modulo04/737-Modulo04/enaho01a-2020-400.dta")
)
enaho05 = data.frame(
read_dta("../../../enaho/2020/737-Modulo05/737-Modulo05/enaho01a-2020-500.dta")
)
enaho34 = data.frame(
read_dta("../../../enaho/2020/737-Modulo34/737-Modulo34/sumaria-2020.dta")
)
enaho37 = data.frame(
read_dta("../../../enaho/2020/737-Modulo37/737-Modulo37/enaho01-2020-700.dta")
)
# Seleccionar variables
enaho02 <- enaho02[ , c("conglome", "vivienda", "hogar" , "codperso",
"ubigeo", "dominio" ,"estrato" ,"p208a", "p209",
"p207", "p203", "p201p" , "p204",  "facpob07") ]
enaho03 <- enaho03[ , c("conglome", "vivienda", "hogar" , "codperso",
"p301a", "p301b", "p301c" , "p300a")]
enaho05 <- enaho05[ , c("conglome", "vivienda", "hogar" , "codperso",
"i524e1", "i538e1", "p558a5" , "i513t", "i518",
"p507", "p511a", "p512b", "p513a1", "p505" , "p506", "d544t", "d556t1",
"d556t2" , "d557t" , "d558t" , "ocu500" , "i530a" , "i541a")]
#----------------------------------------------------------
# 3.0 Merge section #
# Merge identifica automaticamente los casos de merge m:1, 1:1, 1:m
# _merge3 == 1,3
"Left merge"
#enaho02: master data
# enaho01: using data
enaho_merge <- merge(enaho02, enaho01,
by = c("conglome", "vivienda", "hogar"),
all.x = T
)
enaho_02_05 <- merge(enaho02, enaho05,
by = c("conglome", "vivienda", "hogar","codperso"),
all.x = T
)
# by: variable que permite identificar las observaciones en común en las bases de datos
# all.x : La base de datos preservará todas las observaciones de left data (enaho02)
# all.x tiene como valor predeterminado a False.
# all.x = False, all.y = False
# _merge3 == 2,3
enaho_02_05 <- merge(enaho02, enaho05,
by = c("conglome", "vivienda", "hogar","codperso"),
all.y = TRUE
)
# _merge3 == 3 (match inner)
enaho_merge_inner <- merge(enaho02, enaho01,
by = c("conglome", "vivienda", "hogar"),
all.x = F, all.y = F
)
enaho_merge_inner <- merge(enaho02, enaho01,
by = c("conglome", "vivienda", "hogar")
)
enaho_merge_02_05 <- merge(enaho02, enaho05,
by = c("conglome", "vivienda", "hogar","codperso")
)
# Match outer
enaho_merge_outer <- merge(enaho02, enaho05,
by = c("conglome", "vivienda", "hogar","codperso"),
all.x = T, all.y = T
)
enaho_merge_outer_2 <- merge(enaho02, enaho05,
by = c("conglome", "vivienda", "hogar","codperso"),
all=  T
)
# suffixes
enaho_merge <- merge(enaho02, enaho01,
by = c("conglome", "vivienda", "hogar"),
all.x = T
)
names(enaho_merge)
enaho_merge <- merge(enaho02, enaho01,
by = c("conglome", "vivienda", "hogar"),
all.x = T, suffixes = c("","")
)
enaho_merge <- merge(enaho02, enaho01,
by = c("conglome", "vivienda", "hogar"),
all.x = T, suffixes = c("",".y")
)
names(enaho_merge)
num = list(enaho34 , enaho37) # lista de data.frames
merge_hog = enaho01 # Master Data
for (i in num){
merge_hog <- merge(merge_hog, i,
by = c("conglome", "vivienda", "hogar"),
all.x = T, suffixes = c("",".y")
)
}
names(merge_hog)
# Individual dataset
num = list(enaho03 , enaho04, enaho05 ) # lista de data.frames
merge_ind = enaho02 # Master Data
for (i in num){
merge_ind <- merge(merge_ind, i,
by = c("conglome", "vivienda", "hogar","codperso"),
all.x = T, suffixes = c("",".y")
)
}
names(merge_ind)
#----------------------------------------------------------
# merge merge_hog and merge_ind
# mwrge_ind : master data
merge_base <- merge(merge_ind, merge_hog,
by = c("conglome", "vivienda", "hogar"),
all.x = T, suffixes = c("",".y"))
colnames(merge_base)
index <- grep(".y$", colnames(merge_base))  # Regular regular
index
class(index)
# $ el texto finaliza con .y
merge_base_2020 <- merge_base[, - index]
colnames(merge_base_2020)
merge_base_2020['ubigeo_dep'] = substr(merge_base_2020$ubigeo, 1, 2)
merge_base_2020['ubigeo_dep_2'] = paste(str_sub(merge_base_2020$ubigeo,1,2),
"00", sep = "")
### filtrado para algunos departamentos
merge_base_2020 <- merge_base_2020 %>%  filter(
merge_base_2020$ubigeo_dep  %in% c("15","03","04","12") )
merge_base_2020['ubigeo_dep'] = substr(merge_base_2020$ubigeo, 1, 2)
merge_base_2020['ubigeo_dep_2'] = paste(str_sub(merge_base_2020$ubigeo,1,2),
"00", sep = "")
### filtrado para algunos departamentos
merge_base_2020 <- merge_base_2020 %>%  filter(
merge_base_2020$ubigeo_dep  %in% c("15","03","04","12") )
merge_base_2020 <- merge_base_2020 %>%
mutate(ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) )  %>%
mutate(pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
"pobre" ,
ifelse(!is.na(merge_base_2020$gashog2d),"No pobre", NA) ) )   %>%
mutate(pc_pobre = case_when(merge_base_2020$pobreza == 1 ~ "Pobre extremo",
merge_base_2020$pobreza == 2 ~ "Pobre",
merge_base_2020$pobreza == 3 ~ "No pobre"))
# case_when: replace de Stata
#creando dummies usando la variabe de nivel educativo alcanzado p301a
merge_base_2020 <- dummy_cols(merge_base_2020, select_columns = 'p301a')
merge_base_2020 <- merge_base_2020 %>%
mutate(ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
)
View(merge_base_2020)
merge_base_2020 <- merge_base_2020 %>%
mutate(ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) )
View(merge_base_2020)
merge_base_2020 <- merge_base_2020 %>%
mutate(ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) ) %>%
mutate(pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
"pobre" ,
ifelse(!is.na(merge_base_2020$gashog2d),"No pobre", NA) ) )   %>%
mutate(pc_pobre = case_when(merge_base_2020$pobreza == 1 ~ "Pobre extremo",
merge_base_2020$pobreza == 2 ~ "Pobre",
merge_base_2020$pobreza == 3 ~ "No pobre"))
View(merge_base_2020)
merge_base_2020 <- dummy_cols(merge_base_2020, select_columns = 'p301a')
count(merge_base_2020, pobreza, sort = TRUE)
count(merge_base_2020, pobre, sort = F)
df1 <- merge_base_2020 %>% group_by(conglome, vivienda, hogar ) %>%
summarise(
edu_min = min(p301a, na.rm = TRUE),
sup_educ = sum(p301a_10, na.rm = T), total_miembros = n(),
edu_max = max(p301a, na.rm = T)
)
df1_1 <- merge_base_2020 %>% group_by(conglome, vivienda, hogar ) %>%
summarise(
edu_min = min(p301a, na.rm = TRUE),
sup_educ = sum(p301a_10, na.rm = T), total_miembros = n(),
edu_max = max(p301a, na.rm = T), .groups = "keep"
)
View(df1_1)
df2 <- merge_base_2020 %>% group_by(ubigeo_dep) %>%
summarise(index_poverty = mean(dummy_pobre, na.rm = T) )
View(df2)
df2 <- merge_base_2020 %>% group_by(ubigeo_dep) %>%
summarise(index_poverty = mean(dummy_pobre, na.rm = T) ) %>%
mutate(index_poverty = case_when(merge_base_2020$index_poverty == "04" ~ "Arequipa",
merge_base_2020$index_poverty== "03" ~ "Apurimac",
merge_base_2020$index_poverty == "12" ~ "Junin",
merge_base_2020$index_poverty == "15" ~ "Lima") )
df2 <- merge_base_2020 %>% group_by(ubigeo_dep) %>%
summarise(index_poverty = mean(dummy_pobre, na.rm = T) ) %>%
mutate(ubigeo_dep = case_when(merge_base_2020$ubigeo_dep == "04" ~ "Arequipa",
merge_base_2020$ubigeo_dep == "03" ~ "Apurimac",
merge_base_2020$ubigeo_dep == "12" ~ "Junin",
merge_base_2020$ubigeo_dep == "15" ~ "Lima") )
df2 <- merge_base_2020 %>% group_by(ubigeo_dep) %>%
summarise(index_poverty = mean(dummy_pobre, na.rm = T) ) %>%
mutate(region = case_when(merge_base_2020$ubigeo_dep == "04" ~ "Arequipa",
merge_base_2020$ubigeo_dep == "03" ~ "Apurimac",
merge_base_2020$ubigeo_dep == "12" ~ "Junin",
merge_base_2020$ubigeo_dep == "15" ~ "Lima") )
library(haven)
library(dplyr)
library(stringr)   # grep
library(fastDummies)
# tydiverse: ggplot , dplyr other libraries
"1.0 Set Directorio"
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab7") ) # set directorio
"2.0 Load dataset de ENAHO"
enaho01 <- read_dta("../../../enaho/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta")
# tibble dataset
enaho01$dominio
enaho01 <- data.frame(
read_dta("../../../enaho/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta")
)
#data.frame dataset
enaho01
enaho01$dominio
# Check labels
# %>% Ctrl + shift + m
enaho01$p110 %>% attr('labels') # value labels
enaho01$p110 %>% attr('label') # var label
"Módulo02"
enaho02 = data.frame(
read_dta("../../../enaho/2020/737-Modulo02/737-Modulo02/enaho01-2020-200.dta")
)
enaho03 = data.frame(
read_dta("../../../enaho/2020/737-Modulo03/737-Modulo03/enaho01a-2020-300.dta"))
enaho04 = data.frame(
read_dta("../../../enaho/2020/737-Modulo04/737-Modulo04/enaho01a-2020-400.dta")
)
enaho05 = data.frame(
read_dta("../../../enaho/2020/737-Modulo05/737-Modulo05/enaho01a-2020-500.dta")
)
enaho34 = data.frame(
read_dta("../../../enaho/2020/737-Modulo34/737-Modulo34/sumaria-2020.dta")
)
enaho37 = data.frame(
read_dta("../../../enaho/2020/737-Modulo37/737-Modulo37/enaho01-2020-700.dta")
)
num = list(enaho34 , enaho37) # lista de data.frames
merge_hog = enaho01 # Master Data
for (i in num){
merge_hog <- merge(merge_hog, i,
by = c("conglome", "vivienda", "hogar"),
all.x = T, suffixes = c("",".y")
)
}
names(merge_hog)
# Individual dataset
num = list(enaho03 , enaho04, enaho05 ) # lista de data.frames
merge_ind = enaho02 # Master Data
for (i in num){
merge_ind <- merge(merge_ind, i,
by = c("conglome", "vivienda", "hogar","codperso"),
all.x = T, suffixes = c("",".y")
)
}
names(merge_ind)
#----------------------------------------------------------
# merge merge_hog and merge_ind
# mwrge_ind : master data
merge_base <- merge(merge_ind, merge_hog,
by = c("conglome", "vivienda", "hogar"),
all.x = T, suffixes = c("",".y"))
colnames(merge_base)
index <- grep(".y$", colnames(merge_base))  # Regular regular
# $ el texto finaliza con .y
merge_base_2020 <- merge_base[, - index]
colnames(merge_base_2020)
### Ubigeo de departamento
merge_base_2020['ubigeo_dep'] = substr(merge_base_2020$ubigeo, 1, 2)
merge_base_2020['ubigeo_dep_2'] = paste(str_sub(merge_base_2020$ubigeo,1,2),
"00", sep = "")
### filtrado para algunos departamentos
merge_base_2020 <- merge_base_2020 %>%  filter(
merge_base_2020$ubigeo_dep  %in% c("15","03","04","12") ) %>%
mutate(region = case_when(merge_base_2020$ubigeo_dep == "04" ~ "Arequipa",
merge_base_2020$ubigeo_dep == "03" ~ "Apurimac",
merge_base_2020$ubigeo_dep == "12" ~ "Junin",
merge_base_2020$ubigeo_dep == "15" ~ "Lima") )
merge_base_2020 <- merge_base_2020 %>%
mutate(region = case_when(merge_base_2020$ubigeo_dep == "04" ~ "Arequipa",
merge_base_2020$ubigeo_dep == "03" ~ "Apurimac",
merge_base_2020$ubigeo_dep == "12" ~ "Junin",
merge_base_2020$ubigeo_dep == "15" ~ "Lima") )
merge_base_2020 <- merge_base_2020 %>%
mutate(ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) ) %>%
mutate(pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
"pobre" ,
ifelse(!is.na(merge_base_2020$gashog2d),"No pobre", NA) ) )   %>%
mutate(pc_pobre = case_when(merge_base_2020$pobreza == 1 ~ "Pobre extremo",
merge_base_2020$pobreza == 2 ~ "Pobre",
merge_base_2020$pobreza == 3 ~ "No pobre"))
merge_base_2020 <- merge_base_2020 %>%
mutate(merge_base_2020$ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
merge_base_2020$gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) ) %>%
mutate(pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
"pobre" ,
ifelse(!is.na(merge_base_2020$gashog2d),"No pobre", NA) ) )   %>%
mutate(pc_pobre = case_when(merge_base_2020$pobreza == 1 ~ "Pobre extremo",
merge_base_2020$pobreza == 2 ~ "Pobre",
merge_base_2020$pobreza == 3 ~ "No pobre"))
merge_base_2020 <- merge_base_2020 %>%
mutate(merge_base_2020$ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
merge_base_2020$gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) ) %>%
mutate(pobre = ifelse( merge_base_2020$gasto_month < merge_base_2020$linea ,
"pobre" ,
ifelse(!is.na(merge_base_2020$gashog2d),"No pobre", NA) ) )   %>%
mutate(pc_pobre = case_when(merge_base_2020$pobreza == 1 ~ "Pobre extremo",
merge_base_2020$pobreza == 2 ~ "Pobre",
merge_base_2020$pobreza == 3 ~ "No pobre"))
View(merge_base_2020)
merge_base_2020 <- merge_base_2020 %>%
mutate(ingreso_month = merge_base_2020$inghog1d/(12*merge_base_2020$mieperho),
gasto_month = merge_base_2020$gashog2d/(12*merge_base_2020$mieperho)
) %>%
mutate(dummy_pobre = ifelse( gasto_month < merge_base_2020$linea ,
1 ,
ifelse(!is.na(merge_base_2020$gashog2d),0, NA) ) ) %>%
mutate(pobre = ifelse( gasto_month < merge_base_2020$linea ,
"pobre" ,
ifelse(!is.na(merge_base_2020$gashog2d),"No pobre", NA) ) )   %>%
mutate(pc_pobre = case_when(merge_base_2020$pobreza == 1 ~ "Pobre extremo",
merge_base_2020$pobreza == 2 ~ "Pobre",
merge_base_2020$pobreza == 3 ~ "No pobre"))
