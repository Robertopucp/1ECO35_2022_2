beta_x4= beta[,5], sd_x4 = sd[,5]
)
table
View(beta)
View(sd)
View(table)
diag(c(1,2,3,4), 4, 4)
diag(c(1,2,3,4), 4)
diag(c(1,2,3,4), 4)[,2:]
diag(c(1,2,3,4), 4)[,2::]
diag(c(1,2,3,4), 4)[,2:4]
diag(c(1,2,3,4), 4)[,2:k]
ncol(diag(c(1,2,3,4), 4))
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd=F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd=F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
Matrix_robust <- diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
diag(sapply(c(1,2,3,4) , function(x) x ^ 2),4)
x1 <- rnorm(800)
x2 <- rnorm(800)
x3 <- rnorm(800)
x4 <- rnorm(800)
x5 <- rnorm(800)
x6 <- rnorm(800)
x7 <- rnorm(800)
e <- rnorm(800)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + 0.2*x5+0.5*x6+2*x7+e
X <- cbind(matrix(1,800), x1,x2,x3,x4,x5,x6,x7)
ols <- function(M, Y , intercepto = TRUE, Robust.sd = FALSE){
if (intercepto){
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% t(M) %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}else {
M <- M[,2:ncol(M)]
beta <- solve(t(M) %*% M) %*% (t(M) %*% Y)
y_est <- M %*% beta  ## Y estimado
n <- dim(M)[1]  # filas
k <- dim(M)[2] - 1  # varaibles sin contar el intercepto}
df <- n- k ## grados de libertad
if (Robust.sd==F){
sigma <- sum(sapply(Y - y_est , function(x) x ^ 2))/ df
Var <- sigma*solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}else{
Matrix_robust <- diag(sapply(Y - y_est , function(x) x ^ 2),n)
Var <- solve(t(M) %*% M) %*% t(M) %*% Matrix_robust %*% M %*% solve(t(M) %*% M)
sd <- sapply(diag(Var) , sqrt) ## raíz cuadrado a los datos de la diagonal principal de Var
t.est <- abs(beta/sd)
pvalue <-2*pt(t.est, df = df, lower.tail = FALSE) ## pt : t - student densidad
lower_bound <- beta-1.96*sd
upper_bound <- beta+1.96*sd
SCR <- sum(sapply(Y - y_est , function(x) x ^ 2))
SCT <- sum(sapply(Y - mean(y_est) , function(x) x ^ 2))
R2 <- 1-SCR/SCT
rmse <- sqrt(SCR/n)
table <- data.frame(OLS = beta,
standar.error = sd, P.value = pvalue, Lower.bound=lower_bound ,
Upper.bound = upper_bound)
fit_var <- c(R2,rmse)
}
}
return(list(table,fit_var))
}
ols(X,Y)
ols(X,Y, intercepto = F, Robust.sd = T)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
library(sandwich)
## Loop replacement
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab3") ) # set directorio
##################################################################################
"Lapply and Sapply"
vector = seq(100)
lapply(vector, function(square) {square^2}) # resultado en formato lista
sapply(vector, function(square) {square^2}) # vector canonico simple
"Función 1"
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato lista
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
"Función 2, de estandarización"
lapply(vector, function(i, mean, sd){
( i -  mean ) / sd
} , mean = mean(vector), sd = sd(vector))
# Asignando el nombre de la función: standarize
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
# lapply(x, FUN, ...) ... : argumentos adicionales para la función
"Función 3"
lapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
sapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
" Loop replacement in Matrix "
set.seed(756)
x1 <- runif(500) # distribución uniforme entre 0 y 1
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
X <- cbind(matrix(1,500), x1,x2,x3,x4)
# matrix(1,500) vector columna de unos (500 observaciones)
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
"Estandarizar una matriz "
apply(X, 2, function(i){
( i -  mean(i) ) / sd(i)
} )
# 2 se aplica la función a los elementos de cada columna
cps2012  <- get(load("../data/cps2012.Rdata"))  # load R dataset format, extensión Rdata
# Tomamos la varianza de cada columna
apply(cps2012, 2, var) # tomando la varianza por columna (Margin:2)
X <- cps2012[ , which(apply(cps2012, 2, var) != 0)] # Se exlucye las columnas constantes
demean<- function (x){ x- mean(x)}
X<- apply(X, 2, demean)
# Conocer los elementos de una función creada o libreria
args(demean)
args(sandwich)
#------------------------------------------------------------
#             Equivalent *args de Python en R
caso1 <- function(...) return(sum(...))
caso1(2,4,5)
caso2 <- function(...) {
return(prod(...))
}
caso2(sample(1:50, size = 5))
str(sandwich)
args(lapply)
transform <- function(Data, ... ){
Data_select = Data[,...]
}
tarnsform(cps2012, "lnw", "exp1","exp2")
transform(cps2012, "lnw", "exp1","exp2")
cps2012
transform <- function(Data, ... ){
Data_select = Data[,...]
}
transform(cps2012, "lnw", "exp1")
transform <- function(Data, ... ){
Data_select = Data[...]
}
transform(cps2012, "lnw", "exp1","exp2")
transform <- function(Data, ... ){
Data_select = Data[,c(...)]
}
transform(cps2012, "lnw", "exp1","exp2")
transform <- function(Data, ... ){
Data_select = Data[,c(...)]
}
View(transform(cps2012, "lnw", "exp1","exp2"))
transform <- function(Data, ... ){
Data_select = Data[,c(...)]
}
View(transform(cps2012, "lnw", "exp1","exp2","exp3","exp4"))
transform <- function(Data, ... , ... ){
Data_select = Data[,c(...)]
if (... = "sum"){
apply(Data_select, 2, sum)
}
}
View(transform(cps2012, "lnw", "exp1","exp2","exp3","exp4", "sum"))
transform <- function(Data, ... , ... ){
Data_select = Data[,c(...)]
if (... = "sum"){
apply(Data_select, 2, sum)
}
}
View(transform(cps2012, "lnw", "exp1","exp2","exp3","exp4"))
