x1 <- runif(500)
print(x1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(1)
x1 <- runif(500)
print(x1)
set.seed(2)
x1 <- runif(500)
print(x1)
set.seed(2)
x1 <- runif(500)
print(x1)
set.seed(2)
x1 <- runif(500)
print(x1)
set.seed(2)
x1 <- runif(500)
print(x1)
set.seed(2)
x1 <- runif(500)
print(x1)
set.seed(2)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(157)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
print(x1)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
print(e)
transpose <- function(M, est = TRUE, z = NULL, index = c(2,3)){
if(! is.matrix(M)) stop("x must be a matrix")
M <- t(M)
if (est & is.null(z)){
for (j in seq(dim(M)[2])) {
v <- M[,j]
M[,j] <- ( v - mean(v) )/sd(v)
}
} else if (! is.null(z) ) {
M <- M*z
}
return(M)
}
A <- matrix(c(seq(0, 9), seq( 10, 19), seq( 30, 39), seq( -20, -11), seq( 2, 20,2)), nrow = 5, byrow =TRUE)
e
sample(100, 10)
seq(15)
seq(15)
select <- sample(15, 2)
seq(15)[select]
select <- sample(seq(10), 2)
seq(15)[select]
#Check function
str(apply)
install.packages("readxl") # excel, csv
library(readxl)
vector = seq(100)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
library(dplyr) # librería de limpieza de datos
library(tidyr)# librería de limpieza de datos
library(readxl) # lobreria para subir archivos excel, csv
## Loop replacement
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab3") ) # set directorio
vector = seq(100)
lapply(square,vector)
lapply(vector, function(square) {square^2}) # resultado en formato lista
sapply(vector, function(square) {square^2}) # vector canonico simple
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato lista
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
lapply(vector, function(i){
( i -  mean(i) ) / sd(i)
} )
lapply(vector, function(i){
( i -  mean ) / sd
} , mean = mean(vector), sd = sd(vector))
lapply(vector, function(i, mean, sd){
( i -  mean ) / sd
} , mean = mean(vector), sd = sd(vector))
str(sandwich)
str(apply)
library(sandwich)
str(sandwich)
lapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
sapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
X <- cbind(matrix(1,500), x1,x2,x3,x4)
# matrix(1,500) vector columna de unos (500 observaciones)
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, max)
apply(X, 2, min)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, function(i){
( i -  mean(i) ) / sd(i)
} )
load("..//data/cps2012.Rdata")
cps2012  = load("..//data/cps2012.Rdata")
cps2012  = load("../data/cps2012.Rdata")
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab3") ) # set directorio
cps2012  = load("../data/cps2012.Rdata")
cps2012  <- load("../data/cps2012.Rdata")
cps2012  <- get(load("../data/cps2012.Rdata"))
View(data)
apply(cps2012, 2, var)
X <- X[ , which(apply(X, 2, var) != 0)] # exclude all constant variables
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
X<- apply(X, 2, demean)
demean<- function (x){ x- mean(x)}
X<- apply(X, 2, demean)
array = sample(100)
array = sample(100)
cond <- function(x){
if x < 10 {
y = x^2
} else if (x >= 10) {
y = x^3
}
return(y)
}
cond <- function(x){
if (x < 10) {
y = x^2
} else if (x >= 10) {
y = x^3
}
return(y)
}
for i in seq(100){
array[i] = cond(array[i])
}
for ( i in seq(100) ) {
array[i] = cond(array[i])
}
array
arg(lapply)
args(lapply)
arg(demean)
args(demean)
args(sandwich)
vector = seq(100)
lapply(vector, function(square) {square^2}) # resultado en formato lista
sapply(vector, function(square) {square^2}) # vector canonico simple
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} )
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
lapply(vector, function(i, mean, sd){
( i -  mean ) / sd
} , mean = mean(vector), sd = sd(vector))
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
set.seed(756)
x1 <- runif(500) # distribución uniforme entre 0 y 1
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
X <- cbind(matrix(1,500), x1,x2,x3,x4)
# matrix(1,500) vector columna de unos (500 observaciones)
apply(X, 2, mean)
apply(X, 1, mean)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
apply(X, 2, min)
apply(X, 2, function(i){
( i -  mean(i) ) / sd(i)
} )
cps2012  <- get(load("../data/cps2012.Rdata"))  # load R dataset format, extensión Rdata
View(cps2012)
apply(cps2012, 2, var)
X <- cps2012[ , which(apply(cps2012, 2, var) != 0)] # Se exlucye las columnas constantes
X<- apply(X, 2, demean)
View(X)
