# Jaro-Winkler method
similarites <- 1 - stringdist(name1, name2,  method = "jw")
print(similarites)
# cosine method
similarites <-  1 - stringdist(name1, name2,  method = "cosine")
print(similarites)
# help('stringdist-metrics')
# Caso 2: ausencia de palabras
name2 <- "Juan melcochita"
stringdist(name1, name2,  method = "lv")
# Jaro-Winkler method
similarites <- 1 - stringdist(name1, name2,  method = "jw")
print(similarites)
# cosine method
similarites <-  1 - stringdist(name1, name2,  method = "cosine")
print(similarites)
# Caso 3: ordenamiento diferentes
name2 <- "Villanueva Juan Pablo"
# distances basado en Levenshtein distance
stringdist(name1, name2,  method = "lv")
# Jaro-Winkler method
similarites <- 1 - stringdist(name1, name2,  method = "jw")
print(similarites)
# cosine method
similarites <-  1 - stringdist(name1, name2,  method = "cosine")
print(similarites)
# Caso4: Repitición de palabras
name2 <- "Villanueva Villanueva Juan Pablo PABLO"
# distances basado en Levenshtein distance
stringdist(name1, name2,  method = "dl")
# Jaro-Winkler method
similarites <- 1 - stringdist(name1, name2,  method = "jw")
print(similarites)
# cosine method
similarites <-  1 - stringdist(name1, name2,  method = "cosine")
print(similarites)
# Fuzzy join ----
data_match <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99,
ignore_case = T, distance_col='lv_score'
) %>%
group_by(Nombre.x) %>%
slice_min(order_by=lv_score, n=2)
data_match <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99,
ignore_case = T, distance_col='lv_score'
)
data_match_jw <- stringdist_join(
master, usdata,
by = "Nombre",
method = "jw",
mode = "left",
ignore_case = T, distance_col='lv_score'
)
View(data_match_jw)
data_match_jw <- stringdist_join(
master, usdata,
by = "Nombre",
method = c("cosine","jw"),
mode = "left",
ignore_case = T, distance_col='lv_score'
)
data_match_jw <- stringdist_join(
master, usdata,
by = "Nombre",
method = "cosine",
mode = "left",
ignore_case = T, distance_col='lv_score'
)
# Levenshtein distance
data_match_lv <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99,
ignore_case = T, distance_col='lv_score'
)
# Jaro-Winkler method
data_match_jw <- stringdist_join(
master, usdata,
by = "Nombre",
method = "jw",
mode = "left",
ignore_case = T, distance_col='lv_score'
)
# cosine method
data_match_cs <- stringdist_join(
master, usdata,
by = "Nombre",
method = "cosine",
mode = "left",
ignore_case = T, distance_col='lv_score'
)
View(data_match_cs)
data_match_lv <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99, # maxima cantidad de cambios
ignore_case = T, distance_col='lv_score'
) %>%
group_by(Nombre.x) %>%
slice_min(order_by=lv_score, n=3)
View(master)
View(data_match_lv)
library(reshape)
rep("match1","match2","mtach3")
rep("c(match1","match2","mtach3"))
rep(c(match1","match2","mtach3"))
rep(c("match1","match2","mtach3"))
rep(c("match1","match2","mtach3"), 2)
rep(c("match1","match2","mtach3"), dim(data_match_lv)[2]/3)
rep(c("match1","match2","mtach3"), dim(data_match_lv)[1]/3)
n <- dim(data_match_lv)[1]/3
rep(c("match1","match2","match3"), n)
data_match_lv$match <- rep(c("match1","match2","match3"), n)
data_match_lv <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99, # maxima cantidad de cambios
ignore_case = T, distance_col='lv_score'
) %>%
group_by(Nombre.x) %>%
slice_min(order_by=lv_score, n=3)
# cada individo se repite 3 veces por cada uno de los mejores matches
n <- dim(data_match_lv)[1]/3
rep(c("match1","match2","match3"), n)
data_match_lv$match <- rep(c("match1","match2","match3"), n)
dim(data_match_lv)[1]
n <- dim(master)
rep(c("match1","match2","match3"), n)
data_match_lv$match <- rep(c("match1","match2","match3"), n)
dim(data_match_lv)[1]
n <- dim(master)[1]
rep(c("match1","match2","match3"), n)
data_match_lv$match <- rep(c("match1","match2","match3"), n)
View(master)
View(data_match_jw)
data_match_lv <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99, # maxima cantidad de cambios
ignore_case = T, distance_col='lv_score'
) %>%
group_by(Nombre.x) %>%
slice_min(order_by=lv_score, n=3)
View(data_match_lv)
data_match_lv <- stringdist_join(
master, usdata,
by = "Nombre",
method = "lv",
mode = "left",max_dist=99, # maxima cantidad de cambios
ignore_case = T, distance_col='lv_score'
) %>%
group_by(Nombre.x) %>%
slice_min(order_by=lv_score, n=3)
################  Clase 8 Expresiones regulares ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# Load libraries
# install.packages("lubridate")
# install.packages("tidyverse")
# clear environment
rm(list=ls(all=TRUE))
library(readxl)
#library(stringr) # libreria para trabajar expresiones regulares
#library(dplyr)
library(lubridate)
library(tidyverse) # dplyr, ggplot2, tdyr, stringi, stringr
search()
"1.0 Set Directorio"
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab8") ) # set directorio
data <- read_excel("../data/Centro_salud/Centro_salud_mental.xls")
data2 <- data.frame(read_excel("../data/Centro_salud/Centro_salud_mental.xls"))
sapply(data, typeof)
apply(data , 2, function(x) sum(is.na(x)))
# Nombre de las variables a minuscula
colnames(data) <- tolower(colnames(data)) # capital letters to lower letters
#------- Regex -----------
# Patrones básicos
# 1. [] : permitir indicar tipo de caracter, definir el rango de las caracteres
# 2. (): permite agrupar caracteres
# 3. \\-,  \\#,  \\?, se especifica carcateres espaciales
# 4. " " : dentro de comillar se debe espeficiar el patron del texto
# \\\ , un \;  \\\\, para 2\
# 2: patrones de texto
# \\d : identifica digitos
# \\w : identifica caracteres alfanumericos (letras y numeros)
# \\s : identificas espacios
# [a-z], [A-Z], [a-zA-Z] : rango de letras mayusculas o minusculas
# [0-9]: rango de numeros
# \\D : NO identifica digitos
# \\W : NO identifica caracteres alfanumericos (letras y numeros)
# \\S : NO identificas espacios
# [^0-9] : No caputara numero del rango 0 al 9
#  [^a-zA-Z]: No captura o identifica letras (mayuscula o minuscula)
"Patrones de inicio y fin"
# ^\\d, ^M, ^2, ^\\-  : captura inicio de un texto
# \\d$, _M$, -2$, \\-$: captura los textos que terminan en digitos, M, 2 o -
# \\. : identificar cualquier tipo de caracter (espacios, numeros, letras, #!%$)
"jdhdh 77575"
# [0-9]*: astericos permite capterar ninguno, uno o más de uno
# [0-9]+: el signo más permite capturar uno o más uno
# [0-9][a-z]? : ?, permite capturar a lo más una ocurrencia.
# 1) Extraer solo texto de una celda que contiene numero y texto
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la función por filas , por observaciones
function(x) gsub("[0-9]", '', x))
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la función por filas , por observaciones
function(x) gsub("[0-9]", '', x))
# gsub permitir reemplazar, gusb( se espeficica el patron de texto, '', string)
"[0-9]*: ninguno, uno o más digitos"
data$inst2 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\d", '', x))
"\\d: digitos"
# usando la función extraer letras y espacio
data$inst3 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[a-zA-Z\\s]+"))
data$inst4 <- apply(data['institución_ruc'],
1 ,
function(x) str_replace(x,"[^a-zA-Z\\s]+",''))
#  substituye lo que sea diferente a letras y espacio por nada ('').
# Extraer numero
data$ruc1 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("[a-zA-Z]", '', x))
# se extrae digitos de uno o más ocurrencia
data$ruc2 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[0-9]+"))
# extraer solo 3 digitos del rango 0-9
data$ruc3 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[0-9]{3}"))
# {3} me permtie extraer 3 digitos
data$ruc4 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[0-9]{1,}"))
# usando [^0-9], lo que sea diferente de numero en el rango 0 a 9,
# me reemplazas por nada.
data$ruc5 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("[^0-9]", '', x))
# usando \\D*, lo que sea diferentes de digitos, me reemplazas por nada
data$ruc6 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\D", '', x))
# Retirar :00:00 , !%& y 00/00/00
# usando str_replace para reemplazar caracteres
# () permite agrupar, | (permite espeficar diferentes textos)
data$fecha_apertura <- apply(data['fecha_apertura'],
1 ,
function(x) str_replace(x,"(:00:00)|(!%&)|(00/00/00)", ''))
# Extraer las coordenadas de la variables GPS
data$coordinates <- apply(data['gps'],
1 ,
function(x) str_extract(x,"-([0-9]{1,2}).([0-9]{1,3}),-([0-9]{2}).([0-9]{1,4})"))
# [0-9]{1,2} uno o digitos
# @-1.15,-74.155$%&//5
x <- "dada--dss kks. 12434 distrito Villa El Salvador region juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w])")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w])")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w+])")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*])")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s(\\w*)")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s(\\w)")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s(\\w+)")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w+\\s])")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w+\\s]+)")
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w+\\s]+)")
str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[2] # distrito
str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[3]  # region
View(data)
data$distrito <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[2])
data$region <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[3])
data$distrito <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*[D/d]istrito\\s([\\w*\\-\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[2])
View(data[,c('direccion','region')])
View(data[,c('dirección','region')])
data$distrito <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*[D/d]istrito\\s([\\w*\\-\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[2])
data$region <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\-\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[3])
View(data[,c('dirección','region')])
data$telefono_fijo <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(\\d+\\-\\d+)$")[2])
data$telefono_fijo_2 <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(...\\-\\d+)$")[2])
data$telefono_fijo_3 <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(\\d+.\\d+)$")[2])
rm(list=ls(all=TRUE))
library(readxl)
#library(stringr) # libreria para trabajar expresiones regulares
#library(dplyr)
library(lubridate)
library(tidyverse) # dplyr, ggplot2, tdyr, stringi, stringr
search()
"1.0 Set Directorio"
user <- Sys.getenv("USERNAME")  # username
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2022_2/Lab8") ) # set directorio
data <- read_excel("../data/Centro_salud/Centro_salud_mental.xls")
data2 <- data.frame(read_excel("../data/Centro_salud/Centro_salud_mental.xls"))
sapply(data, typeof)
apply(data , 2, function(x) sum(is.na(x)))
# Nombre de las variables a minuscula
colnames(data) <- tolower(colnames(data)) # capital letters to lower letters
#------- Regex -----------
# Patrones básicos
# 1. [] : permitir indicar tipo de caracter, definir el rango de las caracteres
# 2. (): permite agrupar caracteres
# 3. \\-,  \\#,  \\?, se especifica carcateres espaciales
# 4. " " : dentro de comillar se debe espeficiar el patron del texto
# \\\ , un \;  \\\\, para 2\
# 2: patrones de texto
# \\d : identifica digitos
# \\w : identifica caracteres alfanumericos (letras y numeros)
# \\s : identificas espacios
# [a-z], [A-Z], [a-zA-Z] : rango de letras mayusculas o minusculas
# [0-9]: rango de numeros
# \\D : NO identifica digitos
# \\W : NO identifica caracteres alfanumericos (letras y numeros)
# \\S : NO identificas espacios
# [^0-9] : No caputara numero del rango 0 al 9
#  [^a-zA-Z]: No captura o identifica letras (mayuscula o minuscula)
"Patrones de inicio y fin"
# ^\\d, ^M, ^2, ^\\-  : captura inicio de un texto
# \\d$, _M$, -2$, \\-$: captura los textos que terminan en digitos, M, 2 o -
# \\. : identificar cualquier tipo de caracter (espacios, numeros, letras, #!%$)
"jdhdh 77575"
# [0-9]*: astericos permite capterar ninguno, uno o más de uno
# [0-9]+: el signo más permite capturar uno o más uno
# [0-9][a-z]? : ?, permite capturar a lo más una ocurrencia.
# 1) Extraer solo texto de una celda que contiene numero y texto
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la función por filas , por observaciones
function(x) gsub("[0-9]", '', x))
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la función por filas , por observaciones
function(x) gsub("[0-9]", '', x))
# gsub permitir reemplazar, gusb( se espeficica el patron de texto, '', string)
"[0-9]*: ninguno, uno o más digitos"
data$inst2 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\d", '', x))
"\\d: digitos"
# usando la función extraer letras y espacio
data$inst3 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[a-zA-Z\\s]+"))
data$inst4 <- apply(data['institución_ruc'],
1 ,
function(x) str_replace(x,"[^a-zA-Z\\s]+",''))
#  substituye lo que sea diferente a letras y espacio por nada ('').
# Extraer numero
data$ruc1 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("[a-zA-Z]", '', x))
# se extrae digitos de uno o más ocurrencia
data$ruc2 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[0-9]+"))
# extraer solo 3 digitos del rango 0-9
data$ruc3 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[0-9]{3}"))
# {3} me permtie extraer 3 digitos
data$ruc4 <- apply(data['institución_ruc'],
1 ,
function(x) str_extract(x,"[0-9]{1,}"))
# usando [^0-9], lo que sea diferente de numero en el rango 0 a 9,
# me reemplazas por nada.
data$ruc5 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("[^0-9]", '', x))
# usando \\D*, lo que sea diferentes de digitos, me reemplazas por nada
data$ruc6 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\D", '', x))
# Retirar :00:00 , !%& y 00/00/00
# usando str_replace para reemplazar caracteres
# () permite agrupar, | (permite espeficar diferentes textos)
data$fecha_apertura <- apply(data['fecha_apertura'],
1 ,
function(x) str_replace(x,"(:00:00)|(!%&)|(00/00/00)", ''))
# Extraer las coordenadas de la variables GPS
data$coordinates <- apply(data['gps'],
1 ,
function(x) str_extract(x,"-([0-9]{1,2}).([0-9]{1,3}),-([0-9]{2}).([0-9]{1,4})"))
# [0-9]{1,2} uno o digitos
# @-1.15,-74.155$%&//5
#------ str_match ---------
# Extraer una sección del texto sin especificar la forma completa del texto
x <- "dada--dss kks. 12434 distrito Villa El Salvador region san juan de lurigancho"
str_match(x,"\\.*[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w+\\s]+)")
# \\d*: ninguna, uno o más ocurrencias
# \\d+: uno o más ocurrencias
str_match(x,"\\.*[Dd]istrito\\s([\\w*\\s]*)\\s[Rr]egion\\s([\\w*\\s]*)")
#\\.* : captura ninguna, una, o más de un caracter (cualquiera: espacios, letras, numeros, #!%&/())
# () permite capturar lo que me interesa
str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[2] # distrito
str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[3]  # region
data$distrito <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*[D/d]istrito\\s([\\w*\\-\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[2])
data$region <- apply(data['dirección'],
1 ,
function(x) str_match(x,"\\.*+[D/d]istrito\\s([\\w*\\-\\s]*)\\s[R/r]egion\\s([\\w*\\s]*)")[3])
View(data[,c('dirección','region')])
#extracción del numero telefonico
#telf: 123-4559
data$telefono_fijo <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(\\d+\\-\\d+)$")[2])
data$telefono_fijo_2 <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(...\\-\\d+)$")[2])
data$telefono_fijo_3 <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(\\d+.\\d+)$")[2])
data$telefono_fijo <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(\\d\\-\\d)$")[2])
data$telefono_fijo <- apply(data['telefono'],
1 ,
function(x) str_match(x,"\\.*(\\d+\\-\\d+)$")[2])
match_output <- stringr::str_match(data$resolucion,
'DS-(\\d+)-([0-9]+)\\s([A-Z]+)')
View(match_output)
data <- data %>% mutate(code_res = match_output[,2], year_res = match_output[,3],
entidad_res = match_output[,4])
data <- data %>% mutate(code_res = match_output[,2], year_res = match_output[,3],
entidad_res = match_output[,4],
Gob_regional_jur = ifelse(str_detect(institución_ruc,"(^G)|(^R)"), 1 , 0 ),
Minsa_jur = ifelse(str_detect(institución_ruc,"^M"), 1 , 0 )
)
correo <- "rmendozam@pucp.edu.pe"
str_mtach(correo, "(\\w+)\\@.*")
correo <- "rmendozam@pucp.edu.pe"
str_match(correo, "(\\w+)\\@.*")
correo <- "rmendozam@gmail.com"
str_match(correo, "(\\w+)\\@.*")
data$apertura1 <- sapply(data$horario,
function(x) str_extract(x,"\\d+\\:\\d+(?= am)"))
data$apertura2 <- sapply(data$horario,
function(x) str_extract(x,"[\\d+\\:]+(?= am)"))
data$apertura3 <- sapply(data$horario,
function(x) str_extract(x,"(?<=apertura )[\\d+\\:]+"))
data$pre_soles1 <- data$presupuesto |> str_extract("[\\d+\\,]+(?=\\$)")
View(data[,c("presupuesto","pre_soles1")])
data$pre_soles1 <- data$presupuesto |> str_extract("[\\d+\\,]+(?!\\$)")
View(data[,c("presupuesto","pre_soles1")])
data$cierre1 <- data$horario |> str_extract("(?<!apertura )\\d+\\:\\d+")
data$pre_soles2 <- data$presupuesto |> str_extract("\\w+\\B[\\d+\\,]+\\B")
data$pre_soles2 <- data$presupuesto |> str_extract("\\w+\\B[\\d+\\,]+\\B")
data$fecha_apertura_format <-  as.Date(data$fecha_apertura,format='%d/%m/%Y')
data$year = as.numeric(format(data$fecha_apertura_format ,"%Y"))
data$month = as.numeric(format(data$fecha_apertura_format ,"%m"))
data$day = as.numeric(format(data$fecha_apertura_format ,"%d"))
data <- data |> dplyr::mutate(
year1 = ifelse(str_length( as.character(year) ) > 2, year, paste0("20", year)),
nueva_fecha = dmy( paste(day,month, year1, sep = "/")  )
)
data$year <- NULL
nombre <- c("perezjdjdj","4343perez","dsc perez")
str_extract_all(nombre, "\\B+perez+\\B")
nombre <- c("perezjdjdj","4343perez","dsc perez")
str_extract_all(nombre, "\\Bperez\\B")
str_extract_all(nombre, "\\bperez\\B")
str_extract_all(nombre, "\\bperez\\B\\w+")
tr_extract_all(nombre, "\\w\\Bperez\\b")
str_extract_all(nombre, "\\w+\\Bperez\\b")
str_extract_all(nombre, "\\bperez\\b")
str_extract_all(nombre, "\\w+\\Bperez\\b")
str_extract_all(nombre, "\\bperez\\B\\w+")
str_extract_all(nombre, "\\bperez\\b")
nombre <- c("perezmendoza","4343perez","juan perez")
str_extract_all(nombre, "\\w+\\Bperez\\b")
str_extract_all(nombre, "\\bperez\\B\\w+")
str_extract_all(nombre, "\\bperez\\b")
correo <- "rmendozam31@gmail.com"
str_match(correo, "(\\w+)\\@.*")
